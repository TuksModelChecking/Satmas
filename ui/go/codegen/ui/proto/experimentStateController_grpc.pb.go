// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: experiment/experimentStateController.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExperimentStateController_SaveExperiment_FullMethodName = "/experiment.ExperimentStateController/SaveExperiment"
)

// ExperimentStateControllerClient is the client API for ExperimentStateController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The experiment executor service definition.
type ExperimentStateControllerClient interface {
	// executes an experiment
	SaveExperiment(ctx context.Context, in *SaveExperimentRequest, opts ...grpc.CallOption) (*SaveExperimentResponse, error)
}

type experimentStateControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentStateControllerClient(cc grpc.ClientConnInterface) ExperimentStateControllerClient {
	return &experimentStateControllerClient{cc}
}

func (c *experimentStateControllerClient) SaveExperiment(ctx context.Context, in *SaveExperimentRequest, opts ...grpc.CallOption) (*SaveExperimentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveExperimentResponse)
	err := c.cc.Invoke(ctx, ExperimentStateController_SaveExperiment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentStateControllerServer is the server API for ExperimentStateController service.
// All implementations must embed UnimplementedExperimentStateControllerServer
// for forward compatibility
//
// The experiment executor service definition.
type ExperimentStateControllerServer interface {
	// executes an experiment
	SaveExperiment(context.Context, *SaveExperimentRequest) (*SaveExperimentResponse, error)
	mustEmbedUnimplementedExperimentStateControllerServer()
}

// UnimplementedExperimentStateControllerServer must be embedded to have forward compatible implementations.
type UnimplementedExperimentStateControllerServer struct {
}

func (UnimplementedExperimentStateControllerServer) SaveExperiment(context.Context, *SaveExperimentRequest) (*SaveExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExperiment not implemented")
}
func (UnimplementedExperimentStateControllerServer) mustEmbedUnimplementedExperimentStateControllerServer() {
}

// UnsafeExperimentStateControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentStateControllerServer will
// result in compilation errors.
type UnsafeExperimentStateControllerServer interface {
	mustEmbedUnimplementedExperimentStateControllerServer()
}

func RegisterExperimentStateControllerServer(s grpc.ServiceRegistrar, srv ExperimentStateControllerServer) {
	s.RegisterService(&ExperimentStateController_ServiceDesc, srv)
}

func _ExperimentStateController_SaveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentStateControllerServer).SaveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperimentStateController_SaveExperiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentStateControllerServer).SaveExperiment(ctx, req.(*SaveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExperimentStateController_ServiceDesc is the grpc.ServiceDesc for ExperimentStateController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentStateController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "experiment.ExperimentStateController",
	HandlerType: (*ExperimentStateControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveExperiment",
			Handler:    _ExperimentStateController_SaveExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "experiment/experimentStateController.proto",
}
